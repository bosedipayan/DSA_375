class LRUCache {
public:
    class node{
        public:
        int key;
        int val;
        
        node* next;
        node* prev;
        
        node(int _key, int _val)
        {
            key = _key;
            val = _val;
        }
    };
    
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);
    
    int c;
    unordered_map<int,node*> mp;
    
    LRUCache(int capacity) {
        c=capacity;
        head->next=tail;
        tail->prev=head;
    }
    
    void addNode(node* newNode)
    {
        node* temp=head->next;
        newNode->next=temp;
        newNode->prev=head;
        head->next=newNode;
        temp->prev=newNode;
    }
    
    void deleteNode(node* delNode)
    {
        node* prevNode=delNode->prev;
        node* nextNode=delNode->next;
        prevNode->next=delNode->next;
        nextNode->prev=delNode->prev;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end())
        {
            node* getNode=mp[key];
            int getValue=getNode->val;
            mp.erase(key);
            deleteNode(getNode);
            addNode(getNode);
            mp[key]=head->next;
            return getValue;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end())
        {
            node* exsNode = mp[key];
            mp.erase(key);
            deleteNode(exsNode);
        }
        
        if(mp.size()==c)
        {
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        
        addNode(new node(key, value));
        mp[key] = head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
