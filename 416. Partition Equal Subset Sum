class Solution {
public:
    bool checkSum(int i,vector<int> &nums,int target,vector<vector<int>> &dp)
    {
        if(target == 0) return 1;
        if(i == 0) return (nums[0] == target);
        if(dp[i][target] != -1) return dp[i][target];
        
        bool notTake = checkSum(i-1,nums,target,dp);
        
        bool take=0;
        if(nums[i] <= target)
        {
            take = checkSum(i-1,nums,target-nums[i],dp);
        }
        
        return dp[i][target] = notTake || take;
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        
        int s=0;
        for(int i=0;i<n;i++)
        {
            s+=nums[i];
        }
        
        if(s%2 != 0)
        {
            return false;
        }
        
        vector<vector<int>> dp(n, vector<int>(s, -1));
        s/=2;
        return checkSum(n-1,nums,s,dp);
    }
};
