class Solution {
public:
    /*int checkPath(int i,int j,int n,int m,vector<vector<int>>& grid,vector<vector<int>> &dp)
    {
        if(i==n-1 && j==m-1)
        {
            return grid[i][j];
        }
        
        if(i>=n || j>=m) return 1e9;
        if(dp[i][j] != -1) return dp[i][j];
        
        int down=grid[i][j]+checkPath(i+1,j,n,m,grid,dp);
        int right = grid[i][j]+checkPath(i,j+1,n,m,grid,dp);
        
        return dp[i][j] = min(right, down);
    }*/
    int minPathSum(vector<vector<int>>& grid) {
//         int n=grid.size();
//         int m=grid[0].size();
//         vector<vector<int>> dp(n+1,vector<int>(m+1, -1));
        
//         return checkPath(0,0,n,m,grid,dp);
//         return check(n-1,m-1,grid,dp);
        
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m, 0));
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 && j==0) dp[i][j]=grid[i][j];
                else{
                    int up=grid[i][j];
                    if(i>0)
                    {
                        up+=dp[i-1][j];
                    }
                    else
                    {
                        up+=1e9;
                    }
                    
                    int left=grid[i][j];
                    if(j>0)
                    {
                        left+=dp[i][j-1];
                    }
                    else
                    {
                        left+=1e9;
                    }
                    dp[i][j] = min(up, left);
                }
            }
        }
        return dp[n-1][m-1];
    }
};
