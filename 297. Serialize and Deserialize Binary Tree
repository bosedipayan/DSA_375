/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root == NULL) return "";
        string s="";
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode* res=q.front();
                q.pop();
                
                if(res == NULL)
                {
                    s.append("#,");
                    continue;
                }
                else
                {
                    s.append(to_string(res->val)+",");
                }
                
                if(res->left)
                {
                    q.push(res->left);
                }
                else
                {
                    q.push(NULL);
                }
                if(res->right)
                {
                    q.push(res->right);
                }
                else
                {
                    q.push(NULL);
                }
            }
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data=="") return NULL;
        
        stringstream s(data);
        string str;
        
        getline(s, str, ',');
        TreeNode* root = new TreeNode(stoi(str));
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            
            getline(s, str, ',');
            if(str == "#")
            {
                node->left=NULL;
            }
            else
            {
                TreeNode* l_node = new TreeNode(stoi(str));
                node->left = l_node;
                q.push(l_node);
            }
            
            getline(s, str, ',');
            if(str == "#")
            {
                node->right=NULL;
            }
            else
            {
                TreeNode* r_node = new TreeNode(stoi(str));
                node->right = r_node;
                q.push(r_node);
            }
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
