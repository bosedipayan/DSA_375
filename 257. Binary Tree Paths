/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void findPaths(TreeNode* root, string s, vector<string> &ans)
    {
        if(root == NULL)
        {
            return;
        }
        
        s+="->" + to_string(root->val);
        
        if(!root-> left && !root->right)
        {
            ans.push_back(s);
        }
        findPaths(root->left, s, ans);
        findPaths(root->right, s, ans);
        
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        if(root == NULL)
        {
            return ans;
        }
        
        string str=to_string(root->val);
        
        if(!root-> left && !root->right)
        {
            ans.push_back(str);
        }
        findPaths(root->left, str, ans);
        findPaths(root->right, str, ans);
        return ans;
    }
};
