class Solution {
public:
    int lowerBound(vector<int> &nums, int n, int target)
    {
        int ans=n;
        int s=0,e=n-1;
        
        while(s <= e)
        {
            int mid=s+(e-s)/2;
            if(nums[mid] >= target)
            {
                ans=min(ans, mid);
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return ans;
    }
    
    int upperBound(vector<int> &nums, int n, int target)
    {
        int ans=n;
        int s=0,e=n-1;
        
        while(s <= e)
        {
            int mid=s+(e-s)/2;
            if(nums[mid] > target)
            {
                ans=min(ans, mid);
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return ans;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int lb = lowerBound(nums, n, target);
        
        if(lb == n || nums[lb] != target) return {-1,-1};
        
        return {lb, upperBound(nums, n, target)-1};
        
//         vector<int> ans;
        
//         int n=nums.size();
//         int s=0,e=n-1;
        
//         int res=-1;
//         while(s <= e)
//         {
//             int mid=s+(e-s)/2;
            
//             if(nums[mid] == target)
//             {
//                 res=mid;
//                 e=mid-1;
//             }
//             else if(nums[mid] < target)
//             {
//                 s=mid+1;
//             }
//             else
//             {
//                 e=mid-1;
//             }
//         }
        
//         ans.push_back(res);
        
//         res=-1,s=0,e=n-1;
        
//         while(s <= e)
//         {
//             int mid=s+(e-s)/2;
            
//             if(nums[mid] == target)
//             {
//                 res=mid;
//                 s=mid+1;
//             }
//             else if(nums[mid] < target)
//             {
//                 s=mid+1;
//             }
//             else
//             {
//                 e=mid-1;
//             }
//         }
        
//         ans.push_back(res);
        
//         return ans;
        
        
//         unordered_map<int,vector<int>> mp;
        
//         int n=nums.size();
//         for(int i=0;i<n;i++)
//         {
//             mp[nums[i]].push_back({i});
//         }
        
//         vector<int> ans;
//         if(mp.find(target)==mp.end())
//         {
//             ans.push_back(-1);
//             ans.push_back(-1);
//         }
//         else
//         {
//             vector<int> v=mp[target];
//             ans.push_back(v[0]);
//             ans.push_back(v[v.size()-1]);
//         }
//         return ans;
    }
};
