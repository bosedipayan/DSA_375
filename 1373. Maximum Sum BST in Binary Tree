/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class NodeValue {
public: 
    int minNode, maxNode, maxSum;
    
    NodeValue(int minNode, int maxNode, int maxSum)
    {
        this->minNode = minNode;
        this->maxNode = maxNode;
        this->maxSum = maxSum;
    }
};

class Solution {
    
private:
    NodeValue maxSumBSTHelper(TreeNode* root)
    {
        if(!root) return NodeValue(INT_MAX, INT_MIN, 0);
        
        auto left = maxSumBSTHelper(root->left);
        auto right = maxSumBSTHelper(root->right);
        
        if(left.maxNode < root->val && root->val < right.minNode)
        {
            //if BT is BST
            sum = max(sum, root->val + left.maxSum + right.maxSum);
            
            return NodeValue(min(root->val, left.minNode), max(root->val, right.maxNode), root->val + left.maxSum + right.maxSum);
            
        }
        
        return NodeValue(INT_MIN, INT_MAX, max(left.maxSum, right.maxSum));   
    }
    
public:
    int sum=0;
    int maxSumBST(TreeNode* root) 
    {
        maxSumBSTHelper(root);
        return sum>0 ? sum : 0;
        
    }
};

/*class Solution {
public:
    bool isBST(TreeNode* root,long long int mini,long long int maxi)
    {
        if(root == NULL)
        {
            return true;
        }
        
        while(root->val > mini && root->val < maxi)
        {
            bool l = isBST(root->left, mini, root->val);
            bool r = isBST(root->right, root->val, maxi);
            
            return l && r;
        }
        return false;
    }
    void getValues(TreeNode* root,vector<int> &v)
    {
        if(root == NULL)
        {
            return;
        }
        
        v.push_back(root->val);
        
        getValues(root->left, v);
        getValues(root->right, v);
    }
    void checkNode(TreeNode* root,int &ans)
    {
        if(root == NULL)
        {
            return;
        }
        
        if(isBST(root,-1e18,1e18))
        {
            vector<int> v;
            getValues(root,v);
            
            int s=accumulate(v.begin(),v.end(),0);
            ans=max(ans,s);
        }
        
        checkNode(root->left, ans);
        checkNode(root->right, ans);
    }
    int maxSumBST(TreeNode* root) {
        int ans=0;
        
        if(root == NULL)
        {
            return ans;
        }
        
        checkNode(root,ans);
        return ans;
    }
};*/
